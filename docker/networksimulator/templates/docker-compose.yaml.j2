networks:
  front-tier:
    ipam:
      driver: default
      config:
        - subnet: "{{ ip_base }}/16"

services:
  node1:
    image: x1-network-simulator
    build:
        context: ../..
        dockerfile: ./docker/networksimulator/Dockerfile
    command: "{{ flags }} --fakenet 1/{{ num_nodes }} --maxpeers {{ num_nodes }} --nat 'extip:{{ ip_base | ip_address + 1 }}' --nodekeyhex {{ bootnode_key }}"
    ports:
      - "{{ starting_port }}:5050"
      - "{{ starting_port }}:5050/udp"
      - "{{ starting_port + 1000 }}:6060"
      - "8545:8545"
      - "8546:8546"
    networks:
      front-tier:
        ipv4_address: {{ ip_base | ip_address + 1 }}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://{{ ip_base | ip_address + 1 }}:8545"]
      interval: 1s
      timeout: 1s
      retries: 30

{% for id in range(2, num_nodes + 1) %}
  node{{ id }}:
    image: x1-network-simulator
    command: "{{ flags }} --fakenet {{ id }}/{{ num_nodes }} --maxpeers {{ num_nodes }} --bootnodes 'enode://{{ bootnode_pub_key }}@{{ ip_base | ip_address + 1 }}:5050'"
    ports:
      - "{{ starting_port + id - 1 }}:5050"
      - "{{ starting_port + id - 1 }}:5050/udp"
      - "{{ starting_port + id + 1001 }}:6060"
      - "{{ starting_port + id + 2001 }}:8545"
      - "{{ starting_port + id + 3001 }}:8546"
    networks:
      front-tier:
        ipv4_address: {{ ip_base | ip_address + id }}
    depends_on:
      node{{ id - 1 }}:
        condition: service_healthy
    restart: always
    healthcheck:
        test: ["CMD", "uptime"]
        interval: 3s
        timeout: 3s
        retries: 60

{% endfor %}
